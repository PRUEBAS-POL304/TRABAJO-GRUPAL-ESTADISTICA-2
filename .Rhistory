max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
# Gráfica de DIANA
# Conglomerados DIANA en Mapa Bidimensional de países:
# solo paises mal clusterizados
DIANAlabels = ifelse(datavar$dianaVARpoor, datavar$pais, '')
dianaPlot = base + geom_point(size = 3,
aes(color = dianaVAR)) +
labs(title = "DIANA")
# hacer notorios los paises mal clusterizados
dianaPlot + geom_text_repel(
size = 4,
aes(label = DIANAlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
library(rgdal)
library(sp)
#debemos agregar el ISO para el mapa
ISO = "https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/raw/master/all/all.csv"
dataISO = read.csv(ISO)
#Eliminando columnas innecesarias:
dataISO = dataISO[, -c(2, 4:11)]
newnames = c("pais", "iso3")
names(dataISO) = newnames
dataISOvar = merge(datavar, dataISO, by = "pais")
## SUBDATA: VARIABLE INDEPENDIENTE, PAIS E ISO:
varindep = dataISOvar[, c(1, 4, 16)]
mapDIS = sf::read_sf("shapes_mundo.shp") # shapefile
mapDIS = sf::read_sf("./SHAPEFILES/shapes_mundo.shp") # shapefile
mapDIS2 = merge(mapDIS,
varindep,
by.x = 'iso3',
by.y = 'iso3',
all.x = T) #siempre primero el shape
# Librerías del ejercicio:
library(rio)
library(dplyr)
library(ggplot2)
library(cowplot)
library(kableExtra)
library(reshape)
library(DT)
library(equatiomatic) # Instalar remotamente:
#install.packages("equatiomatic")
#remotes::install_github("datalorax/equatiomatic")
library(modelsummary)
library(factoextra)
library(cluster)
library(lmtest)
library(nortest)
library(BBmisc)
library(rio)
dataUNIFICADA = "https://github.com/taiyonoJoel/LIMPIEZA/raw/main/dataunificada.csv"
datavar = import(dataUNIFICADA)
#Eliminando filas innecesarias:
datavar = datavar[-c(81:83, 133:139), ]
table = datavar[, c(1, 3)]
datatable(table, filter = "top")
datavar$inverex       <- as.numeric(datavar$inverex)
datavar$PBI           <- as.numeric(datavar$PBI)
datavar$desempleojuv  <- as.numeric(datavar$desempleojuv)
datavar$transito      <- as.numeric(datavar$transito)
datavar$obeadult      <- as.numeric(datavar$obeadult)
datavar$gastoseduc    <- as.numeric(datavar$gastoseduc)
names(datavar)
str(datavar)
modelo1 = lm(desempleojuv ~ inverex + PBI, data = datavar)
summary(modelo1)
modelo2 = lm(desempleojuv ~ inverex + PBI  +  transito +  obeadult + gastoseduc,
data = datavar)
summary(modelo2)
#equatiomatic::extract_eq(modelo2, use_coefs = TRUE)
model = list('desempleojuv' = datavar)
modelsummary(modelo2,
title = "OLS",
stars = TRUE,
output = "kableExtra")
plot(modelo2, 1)
plot(modelo2, 3)
bptest(modelo2)
plot(modelo2, 2)
shapiro.test(modelo2$residuals)
plot(modelo2, 5)
checkModelo2=as.data.frame(influence.measures(modelo2)$is.inf)
head(checkModelo2)
checkModelo2[checkModelo2$cook.d & checkModelo2$hat, ]
boxplot(normalize(datavar[, -1], method = 'range', range = c(0, 1)))
boxplot(normalize(datavar[, -1], method = 'standardize'))
datavar[, -1] = normalize(datavar[, -1], method = 'standardize')
cor(datavar[, -1])
datavar$PBI = -1 * datavar$PBI
#Veamos correlaciones entre estas variables tipificadas:
cor(datavar[, -1])
dataClus = datavar[, -1]
row.names(dataClus) = datavar$pais
library(cluster)
g.dist = daisy(dataClus, metric = "gower")
# PAM:
library(factoextra)
fviz_nbclust(dataClus,
pam,
diss = g.dist,
method = "gap_stat",
k.max = 10,
verbose = F)
fviz_nbclust(dataClus,
hcut,
diss = g.dist,
method = "gap_stat",
k.max = 10,
verbose = F,
hc_func = "agnes")
#**DIANA:**
fviz_nbclust(dataClus, hcut, diss = g.dist, method = "gap_stat", k.max = 10, verbose = F, hc_func = "diana")
#PAM
set.seed(123)
grupos = 4
res.pam = pam(g.dist, k = grupos, cluster.only = F)
dataClus$pam = res.pam$cluster
#Agnes
res.agnes <- hcut(g.dist,
k = grupos,
hc_func = 'agnes',
hc_method = "ward.D")
dataClus$agnes = res.agnes$cluster
#Diana
res.diana <- hcut(g.dist, k = grupos, hc_func = 'diana')
dataClus$diana = res.diana$cluster
#PAM:
fviz_silhouette(res.pam)
fviz_silhouette(res.agnes)
#DIANA:
fviz_silhouette(res.diana)
library(magrittr)
silPAM = data.frame(res.pam$silinfo$widths)
silPAM$country = row.names(silPAM)
poorPAM = silPAM[silPAM$sil_width < 0, 'country'] %>% sort()
silAGNES = data.frame(res.agnes$silinfo$widths)
silAGNES$country = row.names(silAGNES)
poorAGNES = silAGNES[silAGNES$sil_width < 0, 'country'] %>% sort()
silDIANA = data.frame(res.diana$silinfo$widths)
silDIANA$country = row.names(silDIANA)
poorDIANA = silDIANA[silDIANA$sil_width < 0, 'country'] %>% sort()
poorPAM
poorAGNES
poorDIANA
aggregate(. ~ agnes, data = dataClus, mean)
original = aggregate(. ~ agnes, data = dataClus, mean)
original[order(original$inverex), ]
original[order(original$PBI), ]
original[order(original$desempleojuv), ]
original[order(original$transito), ]
original[order(original$obeadult), ]
original[order(original$gastoseduc), ]
#Guardamos las columnas de PAM, AGNES Y DIANA en la data integrada, y eliminemosla de dataClus.
datavar$pamVARpoor = datavar$pais %in% poorPAM
datavar$pamVAR = as.ordered(dataClus$pam)
dataClus$pam = NULL
datavar$agnesVARpoor = datavar$pais %in% poorAGNES
datavar$agnesVAR = as.ordered(dataClus$agnes)
dataClus$agnes = NULL
datavar$dianaVARpoor = datavar$pais %in% poorDIANA
datavar$dianaVAR = as.ordered(dataClus$diana)
dataClus$diana = NULL
proyeccion = cmdscale(g.dist, k = 2, add = T)
datavar$dim1 <- proyeccion$points[, 1]
datavar$dim2 <- proyeccion$points[, 2]
library(ggrepel)
base = ggplot(datavar, aes(x = dim1,
y = dim2,
label = row.names(dataClus)
)
)
base + geom_text_repel(size = 3,
max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
# Gráfica de PAM
# Conglomerados PAM en Mapa Bidimensonal de países
# solo paises mal clusterizados
PAMlabels = ifelse(datavar$pamVARpoor, datavar$pais, '')
# base
base = ggplot(datavar, aes(x = dim1, y = dim2))  +
scale_color_brewer(type = 'qual', palette = 'Dark2') +
labs(subtitle = "Se destacan los países mal clusterizados")
pamPlot = base + geom_point(size = 3,
aes(color = pamVAR))  +
labs(title = "PAM")
# hacer notorios los paises mal clusterizados
pamPlot + geom_text_repel(
size = 4,
aes(label = PAMlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
# solo paises mal clusterizados
AGNESlabels=ifelse(datavar$agnesVARpoor,datavar$pais,'')
agnesPlot=base + geom_point(size=3,
aes(color=as.factor(agnesVAR))) +
labs(title = "AGNES")
# hacer notorios los paises mal clusterizados
agnesPlot + geom_text_repel(size=4,
aes(label=AGNESlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
# Gráfica de DIANA
# Conglomerados DIANA en Mapa Bidimensional de países:
# solo paises mal clusterizados
DIANAlabels = ifelse(datavar$dianaVARpoor, datavar$pais, '')
dianaPlot = base + geom_point(size = 3,
aes(color = dianaVAR)) +
labs(title = "DIANA")
# hacer notorios los paises mal clusterizados
dianaPlot + geom_text_repel(
size = 4,
aes(label = DIANAlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
library(rgdal)
library(sp)
#debemos agregar el ISO para el mapa
ISO = "https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/raw/master/all/all.csv"
dataISO = read.csv(ISO)
#Eliminando columnas innecesarias:
dataISO = dataISO[, -c(2, 4:11)]
newnames = c("pais", "iso3")
names(dataISO) = newnames
dataISOvar = merge(datavar, dataISO, by = "pais")
## SUBDATA: VARIABLE INDEPENDIENTE, PAIS E ISO:
varindep = dataISOvar[, c(1, 4, 16)]
mapDIS2 = merge(mapDIS,
varindep,
by.x = 'iso3',
by.y = 'iso3',
all.x = T) #siempre primero el shape
View(varindep)
View(mapDIS)
View(mapDIS[[13]][[1]])
### Mapa de variable dependiente
mapaleyendaL = ggplot(mapDIS2) + geom_sf() + theme_light()
View(dataISO)
mapDIS2 = merge(mapDIS,
varindep,
by.x = 'ISO3_CODE',
by.y = 'ISO3_CODE',
all.x = T) #siempre primero el shape
#debemos agregar el ISO para el mapa
ISO = "https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/raw/master/all/all.csv"
dataISO = read.csv(ISO)
#Eliminando columnas innecesarias:
dataISO = dataISO[, -c(2, 4:11)]
newnames = c("pais", "ISO3_CODE")
names(dataISO) = newnames
dataISOvar = merge(datavar, dataISO, by = "pais")
View(dataISOvar)
mapDIS2 = merge(mapDIS,
varindep,
by.x = 'ISO3_CODE',
by.y = 'ISO3_CODE',
all.x = T) #siempre primero el shape
mapDIS[[13]][[1]].
names(mapDIS)
names(mapDIS)
# Librerías del ejercicio:
library(rio)
library(dplyr)
library(ggplot2)
library(cowplot)
library(kableExtra)
library(reshape)
library(DT)
library(equatiomatic) # Instalar remotamente:
#install.packages("equatiomatic")
#remotes::install_github("datalorax/equatiomatic")
library(modelsummary)
library(factoextra)
library(cluster)
library(lmtest)
library(nortest)
library(BBmisc)
library(rio)
dataUNIFICADA = "https://github.com/taiyonoJoel/LIMPIEZA/raw/main/dataunificada.csv"
datavar = import(dataUNIFICADA)
#Eliminando filas innecesarias:
datavar = datavar[-c(81:83, 133:139), ]
table = datavar[, c(1, 3)]
datatable(table, filter = "top")
datavar$inverex       <- as.numeric(datavar$inverex)
datavar$PBI           <- as.numeric(datavar$PBI)
datavar$desempleojuv  <- as.numeric(datavar$desempleojuv)
datavar$transito      <- as.numeric(datavar$transito)
datavar$obeadult      <- as.numeric(datavar$obeadult)
datavar$gastoseduc    <- as.numeric(datavar$gastoseduc)
names(datavar)
str(datavar)
modelo1 = lm(desempleojuv ~ inverex + PBI, data = datavar)
summary(modelo1)
modelo2 = lm(desempleojuv ~ inverex + PBI  +  transito +  obeadult + gastoseduc,
data = datavar)
summary(modelo2)
#equatiomatic::extract_eq(modelo2, use_coefs = TRUE)
model = list('desempleojuv' = datavar)
modelsummary(modelo2,
title = "OLS",
stars = TRUE,
output = "kableExtra")
plot(modelo2, 1)
plot(modelo2, 3)
bptest(modelo2)
plot(modelo2, 2)
shapiro.test(modelo2$residuals)
plot(modelo2, 5)
checkModelo2=as.data.frame(influence.measures(modelo2)$is.inf)
head(checkModelo2)
checkModelo2[checkModelo2$cook.d & checkModelo2$hat, ]
boxplot(normalize(datavar[, -1], method = 'range', range = c(0, 1)))
boxplot(normalize(datavar[, -1], method = 'standardize'))
datavar[, -1] = normalize(datavar[, -1], method = 'standardize')
cor(datavar[, -1])
datavar$PBI = -1 * datavar$PBI
#Veamos correlaciones entre estas variables tipificadas:
cor(datavar[, -1])
dataClus = datavar[, -1]
row.names(dataClus) = datavar$pais
library(cluster)
g.dist = daisy(dataClus, metric = "gower")
# PAM:
library(factoextra)
fviz_nbclust(dataClus,
pam,
diss = g.dist,
method = "gap_stat",
k.max = 10,
verbose = F)
fviz_nbclust(dataClus,
hcut,
diss = g.dist,
method = "gap_stat",
k.max = 10,
verbose = F,
hc_func = "agnes")
#**DIANA:**
fviz_nbclust(dataClus, hcut, diss = g.dist, method = "gap_stat", k.max = 10, verbose = F, hc_func = "diana")
#PAM
set.seed(123)
grupos = 4
res.pam = pam(g.dist, k = grupos, cluster.only = F)
dataClus$pam = res.pam$cluster
#Agnes
res.agnes <- hcut(g.dist,
k = grupos,
hc_func = 'agnes',
hc_method = "ward.D")
dataClus$agnes = res.agnes$cluster
#Diana
res.diana <- hcut(g.dist, k = grupos, hc_func = 'diana')
dataClus$diana = res.diana$cluster
#PAM:
fviz_silhouette(res.pam)
fviz_silhouette(res.agnes)
#DIANA:
fviz_silhouette(res.diana)
library(magrittr)
silPAM = data.frame(res.pam$silinfo$widths)
silPAM$country = row.names(silPAM)
poorPAM = silPAM[silPAM$sil_width < 0, 'country'] %>% sort()
silAGNES = data.frame(res.agnes$silinfo$widths)
silAGNES$country = row.names(silAGNES)
poorAGNES = silAGNES[silAGNES$sil_width < 0, 'country'] %>% sort()
silDIANA = data.frame(res.diana$silinfo$widths)
silDIANA$country = row.names(silDIANA)
poorDIANA = silDIANA[silDIANA$sil_width < 0, 'country'] %>% sort()
poorPAM
poorAGNES
poorDIANA
aggregate(. ~ agnes, data = dataClus, mean)
original = aggregate(. ~ agnes, data = dataClus, mean)
original[order(original$inverex), ]
original[order(original$PBI), ]
original[order(original$desempleojuv), ]
original[order(original$transito), ]
original[order(original$obeadult), ]
original[order(original$gastoseduc), ]
#Guardamos las columnas de PAM, AGNES Y DIANA en la data integrada, y eliminemosla de dataClus.
datavar$pamVARpoor = datavar$pais %in% poorPAM
datavar$pamVAR = as.ordered(dataClus$pam)
dataClus$pam = NULL
datavar$agnesVARpoor = datavar$pais %in% poorAGNES
datavar$agnesVAR = as.ordered(dataClus$agnes)
dataClus$agnes = NULL
datavar$dianaVARpoor = datavar$pais %in% poorDIANA
datavar$dianaVAR = as.ordered(dataClus$diana)
dataClus$diana = NULL
proyeccion = cmdscale(g.dist, k = 2, add = T)
datavar$dim1 <- proyeccion$points[, 1]
datavar$dim2 <- proyeccion$points[, 2]
library(ggrepel)
base = ggplot(datavar, aes(x = dim1,
y = dim2,
label = row.names(dataClus)
)
)
base + geom_text_repel(size = 3,
max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
# Gráfica de PAM
# Conglomerados PAM en Mapa Bidimensonal de países
# solo paises mal clusterizados
PAMlabels = ifelse(datavar$pamVARpoor, datavar$pais, '')
# base
base = ggplot(datavar, aes(x = dim1, y = dim2))  +
scale_color_brewer(type = 'qual', palette = 'Dark2') +
labs(subtitle = "Se destacan los países mal clusterizados")
pamPlot = base + geom_point(size = 3,
aes(color = pamVAR))  +
labs(title = "PAM")
# hacer notorios los paises mal clusterizados
pamPlot + geom_text_repel(
size = 4,
aes(label = PAMlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
# solo paises mal clusterizados
AGNESlabels=ifelse(datavar$agnesVARpoor,datavar$pais,'')
agnesPlot=base + geom_point(size=3,
aes(color=as.factor(agnesVAR))) +
labs(title = "AGNES")
# hacer notorios los paises mal clusterizados
agnesPlot + geom_text_repel(size=4,
aes(label=AGNESlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
# Gráfica de DIANA
# Conglomerados DIANA en Mapa Bidimensional de países:
# solo paises mal clusterizados
DIANAlabels = ifelse(datavar$dianaVARpoor, datavar$pais, '')
dianaPlot = base + geom_point(size = 3,
aes(color = dianaVAR)) +
labs(title = "DIANA")
# hacer notorios los paises mal clusterizados
dianaPlot + geom_text_repel(
size = 4,
aes(label = DIANAlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines')
)
library(rgdal)
library(sp)
#debemos agregar el ISO para el mapa
ISO = "https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/raw/master/all/all.csv"
dataISO = read.csv(ISO)
#Eliminando columnas innecesarias:
dataISO = dataISO[, -c(2, 4:11)]
newnames = c("pais", "ISO3_CODE")
names(dataISO) = newnames
dataISOvar = merge(datavar, dataISO, by = "pais")
## SUBDATA: VARIABLE INDEPENDIENTE, PAIS E ISO:
varindep = dataISOvar[, c(1, 4, 16)]
mapDIS = sf::read_sf("./SHAPEFILES/shapes_mundo.shp") # shapefile
mapDIS2 = merge(mapDIS,
varindep,
by.x = 'ISO3_CODE',
by.y = 'ISO3_CODE',
all.x = T) #siempre primero el shape
names(mapDIS)
### Mapa de variable dependiente
mapaleyendaL = ggplot(mapDIS2) + geom_sf() + theme_light()
mapaleyL = mapaleyendaL + geom_sf(data = mapDIS2,
aes(fill = desempleojuv),
color = "gray")
mapa = mapaleyL +
coord_sf() + theme_void() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "bottom"
) + labs(fill = " ") + theme(legend.text = element_text(size = 10)) +
labs(title = "Desempleo juvenil en el mundo") +
theme(plot.title = element_text(
color = "black",
size = 10,
face = "bold"
))
mapa
dataClus$pais = row.names(dataClus)
row.names(dataClus) = NULL
datavar = merge(datavar, dataClus, by = "pais")
datavar$agnesVAR = factor(datavar$agnesVAR)
mapDIS3=merge(mapDIS,dataISOvar,by.x='iso3',by.y='iso3', all.x = T)
mapDIS3=merge(mapDIS,dataISOvar,
by.x='ISO3_CODE',
by.y='ISO3_CODE',
all.x = T)
mapaleyendaL= ggplot(mapDIS3)+ geom_sf() + theme_light()
mapaleyL= mapaleyendaL + geom_sf(data=mapDIS3,
aes(fill=agnesVAR),color = "gray")
mapa3= mapaleyL +
coord_sf() +
scale_fill_manual(values=c("#29211F","#65A752","#1C6AA8","#D72E3E")) + theme_void() +
theme(axis.title = element_blank(), axis.text = element_blank(), legend.position = c(1.1,0.55)) + labs(fill=" ") + theme(legend.text = element_text(size = 13)) +
labs(title = "4 clusters",caption = "Fuente: Banco Mundial 2022. Elaboración propia.  @luccemhu") +
theme(
plot.title = element_text(color="black", size=15, face="bold"),
plot.caption = element_text(color = "black", size=10))
mapa3
